name: Backend CI/CD

on:
  push:
    branches: [master]
    paths: ['back-end/**']
  pull_request:
    branches: [master]
    paths: ['back-end/**']

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      working-directory: back-end
    steps:
      - uses: actions/checkout@v3

      - name: Setup node.js
        if: ${{ github.event_name == 'push' }}
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get yarn cache directory path
        if: ${{ github.event_name == 'push' }}
        working-directory: ${{ env.working-directory }}
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        if: ${{ github.event_name == 'push' }}
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-be-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-be

      - name: Install dependencies
        if: ${{ github.event_name == 'push' }}
        working-directory: ${{ env.working-directory }}
        run: yarn install --frozen-lockfile

      - uses: actions/setup-go@v3
        with:
          go-version: '1.18'
          check-latest: true

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        working-directory: ${{ env.working-directory }}
        run: make build

      - name: Configure AWS Credentials
        if: ${{ github.event_name == 'push' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: serverless deploy
        if: ${{ github.event_name == 'push' }}
        working-directory: ${{ env.working-directory }}
        env:
          DB_AUTH: ${{ secrets.DB_AUTH }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME_DEV }}
          ALLOW_ORIGIN: ${{ secrets.ALLOW_ORIGIN }}
        run: |
          yarn deploy:dev
