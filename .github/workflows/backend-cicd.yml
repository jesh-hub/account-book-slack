name: Backend CI/CD

on:
  push:
    branches: [master]
    paths: ['back-end/**']
  pull_request:
    branches: [master]
    paths: ['back-end/**']

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    env:
      working-directory: back-end
    steps:
      - uses: actions/checkout@v3

      # DEPLOY_STAGE
      - name: Set environment
        uses: actions/github-script@v6
        with:
          script: |
            const set_env = require('.github/script/set_env.js');
            set_env({github, context, core});

      - name: Setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Get yarn cache directory path
        working-directory: ${{ env.working-directory }}
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-be-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-be

      - name: Install dependencies (npm)
        working-directory: ${{ env.working-directory }}
        run: yarn install --frozen-lockfile

      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'
          check-latest: true

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Swagger
        working-directory: ${{ env.working-directory }}
        run: |
          go install github.com/swaggo/swag/cmd/swag@v1.8.4
          go mod tidy
          make docs

      - name: Build
        working-directory: ${{ env.working-directory }}
        run: make build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: serverless deploy
        working-directory: ${{ env.working-directory }}
        env:
          DB_AUTH: ${{ secrets.DB_AUTH }}
          DB_HOST: ${{ secrets.DB_HOST }}
          ALLOW_ORIGIN: ${{ secrets.ALLOW_ORIGIN }}
        run: |
          if [ "${{ env.DEPLOY_STAGE }}" == "prod" ]; then
            export DB_NAME=${{ secrets.DB_NAME_PROD }}
          else
            export DB_NAME=${{ secrets.DB_NAME_DEV }}
          fi
          yarn deploy:${{ env.DEPLOY_STAGE }}
