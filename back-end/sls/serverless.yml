service: abs-backend
frameworkVersion: '3'

provider:
  name: aws
  stage: ${self:custom.stage}
  architecture: arm64
  runtime: provided.al2
  region: ap-northeast-1
  memorySize: 128
  timeout: 10
  environment:
    slackToken: ${self:custom.environment.slackToken}
    channelId: ${self:custom.environment.channelId}
    botId: ${self:custom.environment.botId}

custom:
  stage: ${opt:stage, self:provider.stage}
  environment: ${file(secret.yml), file(secret.yml):default}
  go:
    cmd: GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -tags lambda.norpc
    supportedRuntimes: [ "provided.al2" ]
    buildProvidedRuntimeAsBootstrap: true

plugins:
  - serverless-go-plugin

functions:
  payments:
    handler: payments/main.go
    events:
      - httpApi:
          path: /abs/payments
          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/payments'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /payments

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
